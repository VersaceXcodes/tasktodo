openapi: 3.0.0
info:
  title: Simple Project To-Do Manager API
  version: 1.0.0
  description: Backend API for Simple Project To-Do Manager
servers:
  - url: http://localhost:3000
paths:
  /api/auth/signup:
    post:
      summary: Create a new user account (Sign-Up)
      operationId: signupUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SignupRequest"
      responses:
        "201":
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthResponse"
        "400":
          description: Bad Request
        "500":
          description: Internal Server Error
  /api/auth/login:
    post:
      summary: Authenticate user and return auth token
      operationId: loginUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LoginRequest"
      responses:
        "200":
          description: User authenticated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthResponse"
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
  /api/auth/user:
    get:
      summary: Retrieve current authenticated user details
      operationId: getCurrentUser
      security:
        - BearerAuth: []
      responses:
        "200":
          description: User details retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetUserResponse"
        "401":
          description: Unauthorized
  /api/tasks:
    get:
      summary: Retrieve all tasks with filtering, sorting, and pagination
      operationId: getTasks
      security:
        - BearerAuth: []
      parameters:
        - name: query
          in: query
          description: Search query for task title
          required: false
          schema:
            type: string
        - name: is_completed
          in: query
          description: Filter tasks by completion status
          required: false
          schema:
            type: boolean
        - name: priority
          in: query
          description: Filter tasks by priority
          required: false
          schema:
            type: string
            enum:
              - Low
              - Medium
              - High
        - name: sort_by
          in: query
          description: Sort tasks by field (created_at, due_date, manual_order)
          required: false
          schema:
            type: string
            enum:
              - created_at
              - due_date
              - manual_order
        - name: sort_order
          in: query
          description: "Order of sorting: asc or desc"
          required: false
          schema:
            type: string
            enum:
              - asc
              - desc
        - name: limit
          in: query
          description: Limit number of tasks returned
          required: false
          schema:
            type: integer
        - name: offset
          in: query
          description: Offset for pagination
          required: false
          schema:
            type: integer
      responses:
        "200":
          description: List of tasks retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TaskListResponse"
        "401":
          description: Unauthorized
    post:
      summary: Create a new task
      operationId: createTask
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateTaskRequest"
      responses:
        "201":
          description: Task created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TaskResponse"
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
  /api/tasks/{id}:
    get:
      summary: Retrieve a specific task by ID
      operationId: getTaskById
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          description: Task ID
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Task details retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TaskResponse"
        "401":
          description: Unauthorized
        "404":
          description: Task not found
    patch:
      summary: Update an existing task
      operationId: updateTask
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          description: Task ID
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateTaskRequest"
      responses:
        "200":
          description: Task updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TaskResponse"
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "404":
          description: Task not found
    delete:
      summary: Delete a specific task
      operationId: deleteTask
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          description: Task ID
          required: true
          schema:
            type: string
      responses:
        "204":
          description: Task deleted successfully
        "401":
          description: Unauthorized
        "404":
          description: Task not found
  /api/tasks/reorder:
    patch:
      summary: Update task order via drag-and-drop
      operationId: reorderTasks
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ReorderTaskRequest"
      responses:
        "200":
          description: Tasks reordered successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TaskListResponse"
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    SignupRequest:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
        password:
          type: string
        is_demo:
          type: boolean
          default: false
    LoginRequest:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
        password:
          type: string
    User:
      type: object
      properties:
        id:
          type: string
        email:
          type: string
          format: email
        is_demo:
          type: boolean
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
    AuthResponse:
      type: object
      properties:
        token:
          type: string
        data:
          $ref: "#/components/schemas/User"
    GetUserResponse:
      type: object
      properties:
        data:
          $ref: "#/components/schemas/User"
    Task:
      type: object
      properties:
        id:
          type: string
        user_id:
          type: string
        title:
          type: string
        description:
          type: string
          nullable: true
        due_date:
          type: string
          format: date
          nullable: true
        priority:
          type: string
          enum:
            - Low
            - Medium
            - High
          default: Medium
        is_completed:
          type: boolean
          default: false
        manual_order:
          type: number
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
    TaskResponse:
      type: object
      properties:
        data:
          $ref: "#/components/schemas/Task"
    TaskListResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/Task"
        count:
          type: number
    CreateTaskRequest:
      type: object
      required:
        - title
        - manual_order
      properties:
        title:
          type: string
        description:
          type: string
          nullable: true
        due_date:
          type: string
          format: date
          nullable: true
        priority:
          type: string
          enum:
            - Low
            - Medium
            - High
          default: Medium
        manual_order:
          type: number
    UpdateTaskRequest:
      type: object
      properties:
        title:
          type: string
        description:
          type: string
          nullable: true
        due_date:
          type: string
          format: date
          nullable: true
        priority:
          type: string
          enum:
            - Low
            - Medium
            - High
        is_completed:
          type: boolean
        manual_order:
          type: number
    ReorderTaskItem:
      type: object
      required:
        - id
        - manual_order
      properties:
        id:
          type: string
        manual_order:
          type: number
    ReorderTaskRequest:
      type: object
      required:
        - tasks
      properties:
        tasks:
          type: array
          items:
            $ref: "#/components/schemas/ReorderTaskItem"
